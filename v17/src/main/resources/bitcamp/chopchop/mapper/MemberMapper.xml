<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bitcamp.chopchop.dao.MemberDao">

<resultMap type="Member" id="MemberMap">
  <id column="member_id" property="memberNo"/>
  <result column="post_no" property="postNo"/>
  <result column="base_address" property="baseAddress"/>
  <result column="detail_address" property="detailAddress"/>
  <result column="email" property="email"/>
  <result column="password" property="password"/>
  <result column="photo" property="photo"/>
  <result column="nickname" property="nickname"/>
  <result column="tel" property="tel"/>
</resultMap> 

	<sql id="basicColumn">
		select
		member_id,
		nickname,
		email,
		tel
	</sql>

	<insert id="insert" parameterType="Member">
		insert into member
		(
		email,
		password,
		nickname,
		tel
		)
		value
		(
		#{email},
		password(#{password}),
		#{nickname},
		#{tel}
		)
	</insert>

	<select id="findAll" resultMap="MemberMap">
		select * from member
	</select>

	<select id="dupEmailCheck" parameterType="String"
		resultType="int">
		select count(*)
		from member
		where email = #{email}
	</select>

	<select id="dupNicknameCheck" parameterType="String"
		resultType="int">
		select count(*)
		from member
		where nickname = #{nickname}
		<!-- 자기 자신을 제외한 닉네임을 찾는다. 
		내가 이미 쓰고 있는 닉네임이 아닌 다른사람이 쓰고 있는 닉네임만을 찾는다. -->
<!-- 		<if test="memberNo != null"> -->
<!-- 		and member_id = #{memberNo} -->
<!-- 		</if> -->
	</select>

	<select id="signEmailCheck" parameterType="String"
		resultType="int">
		select count(*)
		from member
		where email = #{email}
	</select>

	<select id="signPasswordCheck" parameterType="String"
		resultType="int">
		select count(*)
		from member
		where password = #{password}
	</select>

	<select id="findByEmailPassword" parameterType="map"
		resultMap="MemberMap">
		<include refid="basicColumn" />
		from member
		where email = #{email} and password = password(#{password})
	</select>

	<select id="findBy" parameterType="int" resultMap="MemberMap">
		<include refid="basicColumn" />
		,
		photo,
		post_no,
		base_address,
		detail_address
		from member
		where member_id = #{memberNo}
	</select>

	<update id="update" parameterType="Member">
		update member
		<set>
			<if test="email != null">email=#{email},</if>
			<if test="password != null">password=password(#{password}), </if>
			<if test="nickname != null">nickname=#{nickname},</if>
			<if test="tel != null">tel=#{tel},</if>
			<if test="photo != null">photo=#{photo},</if>
			<if test="postNo != null">post_no=#{postNo},</if>
			<if test="baseAddress != null">base_address=#{baseAddress},</if>
			<if test="detailAddress != null">detail_address=#{detailAddress}</if>
		</set>
		where member_id = #{memberNo}
	</update>
  
  <delete id="delete" parameterType="int">
    delete from member
    where member_id = #{member.memberNo}
  </delete>
  
  <select id="chkPw" parameterType="map" resultType="int">
    SELECT count(*) FROM member
		WHERE member_id = #{memberNo}
		AND PASSWORD = password(#{password})
  </select>
  
  <update id="uptPw" parameterType="map">
    UPDATE member
		SET PASSWORD = password(#{password})
		WHERE member_id = #{memberNo}
  </update>
  
  <!-- find password - signin -->
   <update  id="findPw" parameterType="member">
   select password from member where email= #{email}
  </update>
</mapper>